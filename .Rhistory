?cv
math <- stack(iris)
View(math)
View(flight)
View(flights)
rm(math)
rownames(iris)
as.numeric(rownames(iris))
range(as.numeric(rownames(iris)))
range(iris$Species)
range(iris$Petal.Length)
names(iris)
sapply(iris, is.numeric)
g <- sapply(iris, is.numeric)
g
g <- sapply(iris, !is.numeric)
g <- sapply(iris, is.character)
sapply(iris, is.character)
sapply(iris, is.factor)
?sapply
rm(g)
lapply(iris, mean)
lapply(iris[-1], mean)
lapply(iris[-6], mean)
lapply(iris[,1:4], mean)
sapply(iris[,1:4], mean)
sapply(iris[1:4], mean)
vapply(iris[1:4], mean)
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
lapply(x, mean)
tapply(warpbreaks$breaks, warpbreaks[,-1], sum)
warpbreaks$breaks
warpbreaks
7/13
log(0.5384615/(1-0.5384615))
7/6
1.166667*7
1.166667*6
log(1.166667)
?tab_model
??tab_model
install.packages(c("sjPlot", "lme4"))
require(sjPlot); require(lme4)
m1 <- lm(Petal.Width ~ Petal.Length, data = subset(iris, Species == "setosa"))
tab_model(m1)
gc()
install.packages(c("bslib", "thematic"))
source("E:/DOCUMENTS/CIVILE/BELGIQUE/MASTER UCL/LSBA_2021/DATS2M/BLOC 1/QUADRI 2/LSTAT2030_STAT & DATA SCIENCE AVEC R AVANCE/shiny/learning_shiny/run_exam.R", echo=TRUE)
runPlotDens()
source("E:/DOCUMENTS/CIVILE/BELGIQUE/MASTER UCL/LSBA_2021/DATS2M/BLOC 1/QUADRI 2/LSTAT2030_STAT & DATA SCIENCE AVEC R AVANCE/shiny/learning_shiny/run_exam.R", echo=TRUE)
runPlotDens()
?fillPage
ui <- fillPage(fluidPage(titlePanel("Normal vs Student"),
sidebarLayout(sidebarPanel(
sliderInput(inputId = "mean",
label = "Mean - Normal",
min = -5,
max = 5,
value = 0,
step = 0.5),
sliderInput(inputId = "deviation",
label = "Standard Deviation ('sd') - Normal",
min = 0.1,
max = 3,
value = 1,
step = 0.1),
sliderInput(inputId = "df",
label = "Degree of freedom ('df') - Student",
min = 1,
max = 50,
value = 1,
step = 1),
sliderInput(inputId = "range",
label = "Interval (a,b)",
min = -5,
max = 5,
value = c(-1,1),
step = 0.5),
radioButtons(inputId = "todisplay",
label = "Output",
choices = c("Overlay",
"Normal",
"Student"),
selected = "Overlay",
inline = TRUE)),
mainPanel(wellPanel(plotOutput("plot")))
)), padding = 10)
source("E:/DOCUMENTS/CIVILE/BELGIQUE/MASTER UCL/LSBA_2021/DATS2M/BLOC 1/QUADRI 2/LSTAT2030_STAT & DATA SCIENCE AVEC R AVANCE/shiny/learning_shiny/run_exam.R", echo=TRUE)
runPlotDens()
source("E:/DOCUMENTS/CIVILE/BELGIQUE/MASTER UCL/LSBA_2021/DATS2M/BLOC 1/QUADRI 2/LSTAT2030_STAT & DATA SCIENCE AVEC R AVANCE/shiny/learning_shiny/run_exam.R", echo=TRUE)
runPlotDens()
?stack
formula(PlantGrowth)
PlantGrowth
unstack(PlantGrowth
)
pg <- unstack(PlantGrowth)
stack(pg)
stack(pg, select = -ctrl)
irisL <- cbind(
Species = iris$Species,
iris |> stack(select = -Species)
)
View(irisL)
df3 <- data.frame(school = rep(1:3, each = 4), class = rep(9:10, 6),
time = rep(c(1,1,2,2), 3), score = rnorm(12))
View(df3)
wide <- reshape(df3, idvar = c("school", "class"), direction = "wide")
View(wide)
reshape(wide)
rm()
rm(list = ())
?rm
ls()
?ls
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE, fig.align = "center", results = "hold", comment = NA, warning = FALSE, message = FALSE)
library(ggplot2)
library(patchwork)
library(reshape2)
theme_set(theme_bw())
p14 <- p1 +
geom_smooth(formula = "y~x", se = FALSE, color = "lightblue", method = "lm")+
geom_smooth(formula = "y~exp(x)", se = FALSE, color = "red", method = "lm")
set.seed(10)
diamonds2 <- diamonds[sample(nrow(diamonds), size = 400), ]
p0 <- ggplot(diamonds2, aes(carat, price))
p1 <- p0 +
geom_point()
p1
p8 <- p0 +
aes(shape = depth > 62)+
geom_point(size = 1.5, aes(color = depth > 62))+
geom_smooth(se = FALSE, method = "lm", aes(shape = NULL), color = "gray")
p8
p14 <- p1 +
geom_smooth(formula = "y~x", se = FALSE, color = "lightblue", method = "lm")+
geom_smooth(formula = "y~exp(x)", se = FALSE, color = "red", method = "lm")
p14
p14 <- p1 +
geom_smooth(formula = "y~x", se = FALSE, color = "lightblue", method = "lm")+
geom_smooth(formula = "y~exp(x)", se = FALSE, color = "red", method = "lm")+
geom_smooth(formula = "y~log(x)", se = FALSE, color = "green", method = "lm")
p14
p14 <- p1 +
geom_smooth(formula = "y~x", se = FALSE, color = "lightblue", method = "lm")+
geom_smooth(formula = "y~exp(x)", se = FALSE, color = "red", method = "lm")+
geom_smooth(formula = "y~log(x)", se = FALSE, color = "green", method = "lm")+
geom_smooth(formula = "y~x^2", se = FALSE, color = "gray", method = "lm")
p14
p14 <- p1 +
geom_smooth(formula = "y~x", se = FALSE, color = "lightblue", method = "lm")+
geom_smooth(formula = "y~exp(x)", se = FALSE, color = "red", method = "lm")+
geom_smooth(formula = "y~log(x)", se = FALSE, color = "green", method = "lm")+
geom_smooth(formula = "y~x^2", se = FALSE, color = "black", method = "lm")
p14
?power
p14 <- p1 +
geom_smooth(formula = "y~x", se = FALSE, color = "lightblue", method = "lm")+
geom_smooth(formula = "y~exp(x)", se = FALSE, color = "red", method = "lm")+
geom_smooth(formula = "y~log(x)", se = FALSE, color = "green", method = "lm")+
geom_smooth(formula = "y~x^7", se = FALSE, color = "black", method = "lm")
p14
library(shiny); runApp('look.R')
rm(list=ls())
?req
?shiny::req
?interactive
interactive()
require(flexdashboard)
?switch
?input
require(shiny)
?input
?renderPlot
irisL <- cbind(
Species = iris$Species,
iris |> stack(select = -Species)
)
View(irisL)
cbind(2:3,3:6)
theme_set(theme_minimal())+theme(legend.position = "top")
require(ggplot2)
theme_set(theme_minimal())+theme(legend.position = "top")
require(plotly)
rmarkdown::pandoc_version()
package_version("rmarkdown")
package_version(rmarkdown)
packageVersion("rmarkdown")
?get
?switch
require(shiny)
?selectInput
?radioButtons
?inputPanel
?sapply
knitr::opts_chunk$set(echo = FALSE)
data <- data.frame(diamonds)
require(ggplot2)
data <- data.frame(diamonds)
dt <- data[sapply(data, is.numeric)]
dt
sapply(data, is.numeric)
lapply(data, is.numeric)
vapply(data, is.numeric)
sapply(data, is.numeric)
?sliderInput
?renderDT
?renderDataTable
?renderPlot
?switch
renderDT
require(shiny)
renderDT
?renderDT
require(DT)
